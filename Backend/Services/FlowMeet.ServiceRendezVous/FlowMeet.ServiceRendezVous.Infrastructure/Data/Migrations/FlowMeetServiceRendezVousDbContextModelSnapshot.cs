// <auto-generated />
using System;
using System.Collections.Generic;
using FlowMeet.ServiceRendezVous.Infrastructure.Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FlowMeet.ServiceRendezVous.Infrastructure.Data.Migrations
{
    [DbContext(typeof(FlowMeetServiceRendezVousDbContext))]
    partial class FlowMeetServiceRendezVousDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FlowMeet.ServiceRendezVous.Domain.Entities.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("FlowMeet.ServiceRendezVous.Domain.Entities.Collaborateur", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ComplexProperty<Dictionary<string, object>>("Adresse", "FlowMeet.ServiceRendezVous.Domain.Entities.Collaborateur.Adresse#Adresse", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("CodePostal")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Pays")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Rue")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Ville")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.ToTable("Collaborateurs");
                });

            modelBuilder.Entity("FlowMeet.ServiceRendezVous.Domain.Entities.Groupe", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groupes");
                });

            modelBuilder.Entity("FlowMeet.ServiceRendezVous.Domain.Entities.GroupeRendezVousType", b =>
                {
                    b.Property<string>("GroupeId")
                        .HasColumnType("text");

                    b.Property<string>("RendezVousTypeId")
                        .HasColumnType("text");

                    b.HasKey("GroupeId", "RendezVousTypeId");

                    b.HasIndex("RendezVousTypeId");

                    b.ToTable("GroupeRendezVousTypes");
                });

            modelBuilder.Entity("FlowMeet.ServiceRendezVous.Domain.Entities.RendezVous", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CollaborateurId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RendezVousTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CollaborateurId");

                    b.HasIndex("RendezVousTypeId");

                    b.ToTable("RendezVous");
                });

            modelBuilder.Entity("FlowMeet.ServiceRendezVous.Domain.Entities.RendezVousType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Duree")
                        .HasColumnType("interval");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RendezVousTypes");
                });

            modelBuilder.Entity("FlowMeet.ServiceRendezVous.Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("FlowMeet.ServiceRendezVous.Domain.Entities.RoleRendezVousType", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<string>("RendezVousTypeId")
                        .HasColumnType("text");

                    b.HasKey("RoleId", "RendezVousTypeId");

                    b.HasIndex("RendezVousTypeId");

                    b.ToTable("RoleRendezVousTypes");
                });

            modelBuilder.Entity("FlowMeet.ServiceRendezVous.Domain.Entities.GroupeRendezVousType", b =>
                {
                    b.HasOne("FlowMeet.ServiceRendezVous.Domain.Entities.Groupe", "Groupe")
                        .WithMany("GroupeRendezVousTypes")
                        .HasForeignKey("GroupeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowMeet.ServiceRendezVous.Domain.Entities.RendezVousType", "RendezVousType")
                        .WithMany("GroupeRendezVousTypes")
                        .HasForeignKey("RendezVousTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Groupe");

                    b.Navigation("RendezVousType");
                });

            modelBuilder.Entity("FlowMeet.ServiceRendezVous.Domain.Entities.RendezVous", b =>
                {
                    b.HasOne("FlowMeet.ServiceRendezVous.Domain.Entities.Client", "Client")
                        .WithMany("RendezVous")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowMeet.ServiceRendezVous.Domain.Entities.Collaborateur", "Collaborateur")
                        .WithMany("RendezVous")
                        .HasForeignKey("CollaborateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowMeet.ServiceRendezVous.Domain.Entities.RendezVousType", "RendezVousType")
                        .WithMany("RendezVous")
                        .HasForeignKey("RendezVousTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Collaborateur");

                    b.Navigation("RendezVousType");
                });

            modelBuilder.Entity("FlowMeet.ServiceRendezVous.Domain.Entities.RoleRendezVousType", b =>
                {
                    b.HasOne("FlowMeet.ServiceRendezVous.Domain.Entities.RendezVousType", "RendezVousType")
                        .WithMany("RoleRendezVousTypes")
                        .HasForeignKey("RendezVousTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowMeet.ServiceRendezVous.Domain.Entities.Role", "Role")
                        .WithMany("RoleRendezVousTypes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RendezVousType");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FlowMeet.ServiceRendezVous.Domain.Entities.Client", b =>
                {
                    b.Navigation("RendezVous");
                });

            modelBuilder.Entity("FlowMeet.ServiceRendezVous.Domain.Entities.Collaborateur", b =>
                {
                    b.Navigation("RendezVous");
                });

            modelBuilder.Entity("FlowMeet.ServiceRendezVous.Domain.Entities.Groupe", b =>
                {
                    b.Navigation("GroupeRendezVousTypes");
                });

            modelBuilder.Entity("FlowMeet.ServiceRendezVous.Domain.Entities.RendezVousType", b =>
                {
                    b.Navigation("GroupeRendezVousTypes");

                    b.Navigation("RendezVous");

                    b.Navigation("RoleRendezVousTypes");
                });

            modelBuilder.Entity("FlowMeet.ServiceRendezVous.Domain.Entities.Role", b =>
                {
                    b.Navigation("RoleRendezVousTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
