// <auto-generated />
using System.Collections.Generic;
using FlowMeet.Annuaire.Infrastructure.Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FlowMeet.Annuaire.Infrastructure.Data.Migrations
{
    [DbContext(typeof(FlowMeetAnnuaireDbContext))]
    partial class FlowMeetAnnuaireDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FlowMeet.Annuaire.Domain.Entities.Collaborateur", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntiteId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntiteId");

                    b.ToTable("Collaborateurs");
                });

            modelBuilder.Entity("FlowMeet.Annuaire.Domain.Entities.CollaborateurGroupe", b =>
                {
                    b.Property<string>("GroupeId")
                        .HasColumnType("text");

                    b.Property<string>("CollaborateurId")
                        .HasColumnType("text");

                    b.HasKey("GroupeId", "CollaborateurId");

                    b.HasIndex("CollaborateurId");

                    b.ToTable("CollaborateurGroupes");
                });

            modelBuilder.Entity("FlowMeet.Annuaire.Domain.Entities.CollaborateurRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<string>("CollaborateurId")
                        .HasColumnType("text");

                    b.HasKey("RoleId", "CollaborateurId");

                    b.HasIndex("CollaborateurId");

                    b.ToTable("CollaborateurRoles");
                });

            modelBuilder.Entity("FlowMeet.Annuaire.Domain.Entities.Entite", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("TypeEntiteId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ComplexProperty<Dictionary<string, object>>("Adresse", "FlowMeet.Annuaire.Domain.Entities.Entite.Adresse#Adresse", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("CodePostal")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Pays")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Rue")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Ville")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TypeEntiteId");

                    b.ToTable("Entites");
                });

            modelBuilder.Entity("FlowMeet.Annuaire.Domain.Entities.Groupe", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Heritee")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groupes");
                });

            modelBuilder.Entity("FlowMeet.Annuaire.Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Heritee")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("FlowMeet.Annuaire.Domain.Entities.RoleGroupe", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<string>("GroupeId")
                        .HasColumnType("text");

                    b.HasKey("RoleId", "GroupeId");

                    b.HasIndex("GroupeId");

                    b.ToTable("RoleGroupes");
                });

            modelBuilder.Entity("FlowMeet.Annuaire.Domain.Entities.TypeEntite", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TypeEntites");
                });

            modelBuilder.Entity("FlowMeet.Annuaire.Domain.Entities.Collaborateur", b =>
                {
                    b.HasOne("FlowMeet.Annuaire.Domain.Entities.Entite", "Entite")
                        .WithMany()
                        .HasForeignKey("EntiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entite");
                });

            modelBuilder.Entity("FlowMeet.Annuaire.Domain.Entities.CollaborateurGroupe", b =>
                {
                    b.HasOne("FlowMeet.Annuaire.Domain.Entities.Collaborateur", "Collaborateur")
                        .WithMany("CollaborateurGroupes")
                        .HasForeignKey("CollaborateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowMeet.Annuaire.Domain.Entities.Groupe", "Groupe")
                        .WithMany("CollaborateurGroupes")
                        .HasForeignKey("GroupeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collaborateur");

                    b.Navigation("Groupe");
                });

            modelBuilder.Entity("FlowMeet.Annuaire.Domain.Entities.CollaborateurRole", b =>
                {
                    b.HasOne("FlowMeet.Annuaire.Domain.Entities.Collaborateur", "Collaborateur")
                        .WithMany("CollaborateurRoles")
                        .HasForeignKey("CollaborateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowMeet.Annuaire.Domain.Entities.Role", "Role")
                        .WithMany("CollaborateurRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collaborateur");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FlowMeet.Annuaire.Domain.Entities.Entite", b =>
                {
                    b.HasOne("FlowMeet.Annuaire.Domain.Entities.Entite", "Parent")
                        .WithMany("Enfants")
                        .HasForeignKey("ParentId");

                    b.HasOne("FlowMeet.Annuaire.Domain.Entities.TypeEntite", "TypeEntite")
                        .WithMany("Entites")
                        .HasForeignKey("TypeEntiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("TypeEntite");
                });

            modelBuilder.Entity("FlowMeet.Annuaire.Domain.Entities.RoleGroupe", b =>
                {
                    b.HasOne("FlowMeet.Annuaire.Domain.Entities.Groupe", "Groupe")
                        .WithMany("RoleGroupes")
                        .HasForeignKey("GroupeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowMeet.Annuaire.Domain.Entities.Role", "Role")
                        .WithMany("RoleGroupes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Groupe");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FlowMeet.Annuaire.Domain.Entities.Collaborateur", b =>
                {
                    b.Navigation("CollaborateurGroupes");

                    b.Navigation("CollaborateurRoles");
                });

            modelBuilder.Entity("FlowMeet.Annuaire.Domain.Entities.Entite", b =>
                {
                    b.Navigation("Enfants");
                });

            modelBuilder.Entity("FlowMeet.Annuaire.Domain.Entities.Groupe", b =>
                {
                    b.Navigation("CollaborateurGroupes");

                    b.Navigation("RoleGroupes");
                });

            modelBuilder.Entity("FlowMeet.Annuaire.Domain.Entities.Role", b =>
                {
                    b.Navigation("CollaborateurRoles");

                    b.Navigation("RoleGroupes");
                });

            modelBuilder.Entity("FlowMeet.Annuaire.Domain.Entities.TypeEntite", b =>
                {
                    b.Navigation("Entites");
                });
#pragma warning restore 612, 618
        }
    }
}
