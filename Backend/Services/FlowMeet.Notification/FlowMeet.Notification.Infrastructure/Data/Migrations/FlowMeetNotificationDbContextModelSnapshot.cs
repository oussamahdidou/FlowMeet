// <auto-generated />
using System;
using FlowMeet.Notification.Infrastructure.Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FlowMeet.Notification.Infrastructure.Data.Migrations
{
    [DbContext(typeof(FlowMeetNotificationDbContext))]
    partial class FlowMeetNotificationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FlowMeet.Notification.Domain.Entities.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("NotificationTemplateId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTemplateId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("FlowMeet.Notification.Domain.Entities.NotificationTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NotificationTemplates");
                });

            modelBuilder.Entity("FlowMeet.Notification.Domain.Entities.TargetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TargetUsers");
                });

            modelBuilder.Entity("FlowMeet.Notification.Domain.Entities.UserNotification", b =>
                {
                    b.Property<string>("TargetUserId")
                        .HasColumnType("text");

                    b.Property<string>("MessageId")
                        .HasColumnType("text");

                    b.HasKey("TargetUserId", "MessageId");

                    b.HasIndex("MessageId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("FlowMeet.Notification.Domain.Entities.Message", b =>
                {
                    b.HasOne("FlowMeet.Notification.Domain.Entities.NotificationTemplate", "NotificationTemplate")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationTemplate");
                });

            modelBuilder.Entity("FlowMeet.Notification.Domain.Entities.UserNotification", b =>
                {
                    b.HasOne("FlowMeet.Notification.Domain.Entities.Message", "Message")
                        .WithMany("UserNotifications")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowMeet.Notification.Domain.Entities.TargetUser", "TargetUser")
                        .WithMany("UserNotifications")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("FlowMeet.Notification.Domain.Entities.Message", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("FlowMeet.Notification.Domain.Entities.NotificationTemplate", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("FlowMeet.Notification.Domain.Entities.TargetUser", b =>
                {
                    b.Navigation("UserNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
